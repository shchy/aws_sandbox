AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  projectName:
    Type: String
  vpc:
    Type: String
  publicSubnet1:
    Type: String
  publicSubnet2:
    Type: String
  privateSubnet1:
    Type: String
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
Resources:
  # ECS-----------------------------------------
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${projectName}-culster
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref "EC2Role"

  

  SecurityGroup2:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${projectName}-hosts
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref SecurityGroup
          IpProtocol: -1
      VpcId: !Ref vpc

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${projectName}-nginx-scaling
      VPCZoneIdentifier:
        - !Ref publicSubnet1
        - !Ref publicSubnet2
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: "1"
      MaxSize: "1"
      DesiredCapacity: "1"

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ECSAMI
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
      InstanceType: "t2.small"
      SecurityGroups:
        - !Ref "SecurityGroup2"
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: "30"
            VolumeType: "gp2"



  

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${projectName}-nginx-clb-sg
      GroupDescription: Enable HTTP access on the configured port
      VpcId: !Ref vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: 
        - !Ref publicSubnet1
        - !Ref publicSubnet2
      SecurityGroups:
        - !Ref SecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      VpcId: !Ref vpc
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: "instance"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
  
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: 
      - TargetGroup
      - TaskDefinition
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: EC2
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: simple-app
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      ServiceName: !Sub ${projectName}-culster-service

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - EC2
      Cpu: "256"
      Memory: "512"
      NetworkMode: "bridge"
      ExecutionRoleArn: !Ref TaskExecutionRole
      ContainerDefinitions:
        - Name: "simple-app"
          Image: nginx
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
          Environment:
            - Name: "TZ"
              Value: "Asia/Tokyo"
      Volumes:
        - Name: "varlog"
  
# ECS-----------------------------------------

Outputs:
  NginxURL:
    Description: URL of the website
    Value: !Sub http://${LoadBalancer.DNSName}
