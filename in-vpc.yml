AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  projectName:
    Type: String
    Default: test
    Description: "Resource prefix"
    AllowedPattern: "^[a-zA-Z][a-zA-Z0-9]*"
  # ssh-key
  eC2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Default: "mackerel-test"
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
Resources:
  vpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-vpc
  internetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-igw
  igwAttachVpc:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref internetGateway
      VpcId: !Ref vpc
  publicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      AvailabilityZone: "ap-southeast-1a"
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-public-subnet01
  publicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      AvailabilityZone: "ap-southeast-1c"
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-public-subnet02
  privateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      AvailabilityZone: "ap-southeast-1a"
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-private-subnet01
  publicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-public-rtb
  privateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-private-rtb

  routeAddInternet:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetGateway
      RouteTableId: !Ref publicRouteTable

  associatePublicSubnet1ToPublicRouteTable:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet1

  associatePublicSubnet2ToPublicRouteTable:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet2

  associatePrivateSubnet1ToPublicRouteTable:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId: !Ref privateSubnet1

  publicAlbSecuritygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${projectName}-public-alb-sg
      GroupDescription: !Sub ${projectName}-public-alb-sg
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-public-alb-sg
      VpcId: !Ref vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"

  publicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${projectName}-public-alb
      Scheme: internet-facing
      Subnets:
        - !Ref publicSubnet1
        - !Ref publicSubnet2
      SecurityGroups:
        - !Ref publicAlbSecuritygroup
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-public-alb

  publicLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${projectName}-public-trg
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-public-trg
      TargetType: lambda
      Targets:
        - Id: !GetAtt vpcLambda.Arn

  publicLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref publicLoadBalancerTargetGroup
          Type: forward
      LoadBalancerArn: !Ref publicLoadBalancer
      Port: 80
      Protocol: HTTP

  iamRole1:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      RoleName: !Sub ${projectName}-lambda-role

  lambdaSecuritygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${projectName}-lambda-sg
      GroupDescription: !Sub ${projectName}-lambda-sg
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-lambda-sg
      VpcId: !Ref vpc

  vpcLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub ${projectName}-Function
      Code: hello_lambda
      Handler: index.lambda_handler
      Role: !GetAtt iamRole1.Arn
      Runtime: python3.7
      VpcConfig:
        SecurityGroupIds:
          - !Ref lambdaSecuritygroup
        SubnetIds:
          - !Ref privateSubnet1

  vpcLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt vpcLambda.Arn
      Action: "lambda:InvokeFunction"
      Principal: elasticloadbalancing.amazonaws.com

  ec2Securitygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${projectName}-ec2-sg
      GroupDescription: !Sub ${projectName}-ec2-sg
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-ec2-sg
      VpcId: !Ref vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"

  eC2:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: ap-southeast-1a
      ImageId: ami-e90dc68a
      InstanceType: t2.micro
      KeyName: !Ref eC2KeyPair
      SecurityGroupIds:
        - !Ref ec2Securitygroup
      SubnetId: !Ref publicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${projectName}-ec2

# ECS-----------------------------------------
ECSCluster:
  Type: AWS::ECS::Cluster
  Properties:
    ClusterName: "test-cluster"
LogGroup:
  Type: AWS::Logs::LogGroup
  Properties:
    LogGroupName: "test-task-log-group"
    RetentionInDays: 1
TaskDefinition:
  Type: AWS::ECS::TaskDefinition
  Properties:
    RequiresCompatibilities:
      - EC2
    Cpu: "256"
    Memory: "512"
    ContainerDefinitions:
      - Name: "app"
        Image: "busybox"
        EntryPoint:
          - "sh"
          - "-c"
        Command:
          - 'while true; do echo "{\"foo\":1000,\"time\":\"2019-05-09T20:00:00+09:00\"}"; sleep 10; done'
        Essential: "true"
        LogConfiguration:
          LogDriver: "awslogs"
          Options:
            awslogs-group: !Ref LogGroup
            awslogs-region: "ap-northeast-1"
            awslogs-stream-prefix: "app"
        Environment:
          - Name: "TZ"
            Value: "Asia/Tokyo"
    Volumes:
      - Name: "varlog"
ECSService:
  Type: AWS::ECS::Service
  Properties:
    Cluster: !Ref ECSCluster
    LaunchType: EC2
    DesiredCount: 1
    TaskDefinition: !Ref TaskDefinition
    ServiceName: "test-service"
ECSAutoScalingGroup:
  Type: AWS::AutoScaling::AutoScalingGroup
  Properties:
    AvailabilityZones: !GetAZs ""
    LaunchConfigurationName: !Ref LaunchConfig
    MinSize: "1"
    MaxSize: "1"
EC2Role:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Statement:
        - Effect: Allow
          Principal:
            Service: ["ec2.amazonaws.com"]
          Action: ["sts:AssumeRole"]
    Path: /
    Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action:
                - "ecs:CreateCluster"
                - "ecs:DeregisterContainerInstance"
                - "ecs:DiscoverPollEndpoint"
                - "ecs:Poll"
                - "ecs:RegisterContainerInstance"
                - "ecs:StartTelemetrySession"
                - "ecs:Submit*"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource: "*"
EC2InstanceProfile:
  Type: AWS::IAM::InstanceProfile
  Properties:
    Path: /
    Roles:
      - !Ref "EC2Role"
LaunchConfig:
  Type: AWS::AutoScaling::LaunchConfiguration
  Properties:
    ImageId: !Ref ECSAMI
    IamInstanceProfile: !Ref EC2InstanceProfile
    UserData:
      Fn::Base64: !Sub |
        #!/bin/bash -xe
        echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
    InstanceType: "t2.small"
    BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          VolumeSize: "30"
          VolumeType: "gp2"

# ECS-----------------------------------------
# Dev01:
#   Type: "AWS::ECS::Cluster"
# Nginx:
#   Type: "AWS::ECS::TaskDefinition"
#   Properties:
#     ContainerDefinitions:
#       - Name: "nginx"
#         Image: nginx
#         PortMappings:
#           - ContainerPort: 80
#             HostPort: 80
#         Cpu: 1024
#         Memory: 500
# NginxService:
#   Type: AWS::ECS::Service
#   Properties:
#     Cluster: !Ref Dev01
#     DesiredCount: 1
#     LoadBalancers:
#       - ContainerName: "nginx"
#         ContainerPort: "80"
#         LoadBalancerName: !Ref clb
#     Role: !Ref ECSServiceRole
#     TaskDefinition: !Ref Nginx
# DevInstance:
#   Type: AWS::EC2::Instance
#   Properties:
#     AvailabilityZone: ap-southeast-1a
#     ImageId: ami-e90dc68a
#     InstanceType: t2.micro
#     KeyName: !Ref eC2KeyPair
#     BlockDeviceMappings:
#       - DeviceName: /dev/xvda
#         Ebs:
#           DeleteOnTermination: "false"
#           VolumeSize: "100"
#     InstanceInitiatedShutdownBehavior: stop
#     Monitoring: "true"
#     SourceDestCheck: "true"
#     UserData: !Base64
#       Fn::Join:
#         - ""
#         - - "#!/bin/bash\n"
#           - echo ECS_CLUSTER=
#           - !Ref Dev01
#           - " >> /etc/ecs/ecs.config"
#     NetworkInterfaces:
#       - AssociatePublicIpAddress: "true"
#         DeviceIndex: "0"
#         GroupSet:
#           - !Ref ec2Securitygroup
#         SubnetId: !Ref publicSubnet1
#     IamInstanceProfile: !Ref "EC2InstanceProfile"
#     Tags:
#       - Key: Name
#         Value: docker-dev01
# EC2InstanceProfile:
#   Type: AWS::IAM::InstanceProfile
#   Properties:
#     Path: /
#     Roles:
#       - !Ref "EC2Role"
# EC2Role:
#   Type: AWS::IAM::Role
#   Properties:
#     AssumeRolePolicyDocument:
#       Statement:
#         - Effect: Allow
#           Principal:
#             Service:
#               - ec2.amazonaws.com
#           Action:
#             - sts:AssumeRole
#     Path: /
#     Policies:
#       - PolicyName: ecs-service
#         PolicyDocument:
#           Statement:
#             - Effect: Allow
#               Action:
#                 - ecs:CreateCluster
#                 - ecs:DeregisterContainerInstance
#                 - ecs:DiscoverPollEndpoint
#                 - ecs:Poll
#                 - ecs:RegisterContainerInstance
#                 - ecs:StartTelemetrySession
#                 - ecs:Submit*
#                 - ecr:GetAuthorizationToken
#                 - ecr:BatchCheckLayerAvailability
#                 - ecr:GetDownloadUrlForLayer
#                 - ecr:BatchGetImage
#               Resource: "*"
# ECSServiceRole:
#   Type: AWS::IAM::Role
#   Properties:
#     AssumeRolePolicyDocument:
#       Statement:
#         - Effect: Allow
#           Principal:
#             Service:
#               - ecs.amazonaws.com
#           Action:
#             - sts:AssumeRole
#     Path: /
#     Policies:
#       - PolicyName: ecs-service
#         PolicyDocument:
#           Statement:
#             - Effect: Allow
#               Action:
#                 - ec2:AuthorizeSecurityGroupIngress
#                 - ec2:Describe*
#                 - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
#                 - elasticloadbalancing:Describe*
#                 - elasticloadbalancing:RegisterInstancesWithLoadBalancer
#               Resource: "*"
# clb:
#   Type: AWS::ElasticLoadBalancing::LoadBalancer
#   Properties:
#     LoadBalancerName: !Sub ${projectName}-public-clb
#     Instances:
#       - !Ref DevInstance
#     Scheme: internet-facing
#     Subnets:
#       - !Ref publicSubnet1
#     SecurityGroups:
#       - !Ref publicAlbSecuritygroup
#     Tags:
#       - Key: Name
#         Value: !Sub ${projectName}-public-clb
#     Listeners:
#       - LoadBalancerPort: "80"
#         InstancePort: "80"
#         Protocol: HTTP
#     HealthCheck:
#       Target: HTTP:80/
#       HealthyThreshold: "3"
#       UnhealthyThreshold: "5"
#       Interval: "30"
#       Timeout: "5"
Outputs:
  ALBURL:
    Description: ALB DNS
    Value: !Join
      - ""
      - - http://
        - !GetAtt "publicLoadBalancer.DNSName"
  # CLBURL:
  #   Description: CLB DNS
  #   Value: !Join
  #     - ""
  #     - - http://
  #       - !GetAtt "clb.DNSName"
