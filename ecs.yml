AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  projectName:
    Type: String
    Default: test
    Description: "Resource prefix"
    AllowedPattern: "^[a-zA-Z][a-zA-Z0-9]*"
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
Resources:
  # ECS-----------------------------------------
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "test-cluster"
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "test-task-log-group"
      RetentionInDays: 1
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - EC2
      Cpu: "256"
      Memory: "512"
      ContainerDefinitions:
        - Name: "app"
          Image: nginx
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
          # EntryPoint:
          #   - "sh"
          #   - "-c"
          # Command:
          #   - 'while true; do echo "{\"foo\":1000,\"time\":\"2019-05-09T20:00:00+09:00\"}"; sleep 10; done'
          Essential: "true"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: "ap-southeast-1"
              awslogs-stream-prefix: "app"
          Environment:
            - Name: "TZ"
              Value: "Asia/Tokyo"
      Volumes:
        - Name: "varlog"
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: EC2
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinition
      ServiceName: "test-service"
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs ""
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: "1"
      MaxSize: "1"
      LoadBalancerNames:
        - !Ref "ElasticLoadBalancer"
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ["ec2.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:CreateCluster"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Poll"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:StartTelemetrySession"
                  - "ecs:Submit*"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref "EC2Role"
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ECSAMI
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
      InstanceType: "t2.small"
      SecurityGroups:
        - !Ref "InstanceSecurityGroup"
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: "30"
            VolumeType: "gp2"
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones: !GetAZs ""
      CrossZone: "true"
      Listeners:
        - LoadBalancerPort: "80"
          InstancePort: "80"
          Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: "3"
        UnhealthyThreshold: "5"
        Interval: "30"
        Timeout: "5"
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access on the configured port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
# ECS-----------------------------------------

Outputs:
  URL:
    Description: URL of the website
    Value: !Join
      - ""
      - - http://
        - !GetAtt "ElasticLoadBalancer.DNSName"
