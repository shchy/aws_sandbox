AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  projectName:
    Type: String
    Default: test4
    Description: Resource prefix
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9]*
  eC2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Default: mackerel-test
Resources:
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${projectName}-vpc
  internetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${projectName}-igw
  igwAttachVpc:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: internetGateway
      VpcId:
        Ref: vpc
  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: vpc
      AvailabilityZone: ap-southeast-1a
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${projectName}-public-subnet01
  publicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: vpc
      AvailabilityZone: ap-southeast-1c
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${projectName}-public-subnet02
  privateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: vpc
      AvailabilityZone: ap-southeast-1a
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${projectName}-private-subnet01
  publicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: vpc
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${projectName}-public-rtb
  privateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: vpc
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${projectName}-private-rtb
  routeAddInternet:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: internetGateway
      RouteTableId:
        Ref: publicRouteTable
  associatePublicSubnet1ToPublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: publicRouteTable
      SubnetId:
        Ref: publicSubnet1
  associatePublicSubnet2ToPublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: publicRouteTable
      SubnetId:
        Ref: publicSubnet2
  associatePrivateSubnet1ToPublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: privateRouteTable
      SubnetId:
        Ref: privateSubnet1
  publicAlbSecuritygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${projectName}-public-alb-sg
      GroupDescription:
        Fn::Sub: ${projectName}-public-alb-sg
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${projectName}-public-alb-sg
      VpcId:
        Ref: vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
  publicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name:
        Fn::Sub: ${projectName}-public-alb
      Scheme: internet-facing
      Subnets:
        - Ref: publicSubnet1
        - Ref: publicSubnet2
      SecurityGroups:
        - Ref: publicAlbSecuritygroup
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${projectName}-public-alb
  publicLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:
        Fn::Sub: ${projectName}-public-trg
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${projectName}-public-trg
      TargetType: lambda
      Targets:
        - Id:
            Fn::GetAtt:
              - vpcLambda
              - Arn
  publicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: publicLoadBalancerTargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: publicLoadBalancer
      Port: 80
      Protocol: HTTP
  iamRole1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      RoleName:
        Fn::Sub: ${projectName}-lambda-role
  lambdaSecuritygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${projectName}-lambda-sg
      GroupDescription:
        Fn::Sub: ${projectName}-lambda-sg
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${projectName}-lambda-sg
      VpcId:
        Ref: vpc
  vpcLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${projectName}-Function
      Code:
        S3Bucket: mackerel-bucket
        S3Key: 6f267e2691456bd8cbc503b1dd00693b
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - iamRole1
          - Arn
      Runtime: python3.7
      VpcConfig:
        SecurityGroupIds:
          - Ref: lambdaSecuritygroup
        SubnetIds:
          - Ref: privateSubnet1
  vpcLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - vpcLambda
          - Arn
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com
  ec2Securitygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${projectName}-ec2-sg
      GroupDescription:
        Fn::Sub: ${projectName}-ec2-sg
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${projectName}-ec2-sg
      VpcId:
        Ref: vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0
  eC2:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: ap-southeast-1a
      ImageId: ami-e90dc68a
      InstanceType: t2.micro
      KeyName:
        Ref: eC2KeyPair
      SecurityGroupIds:
        - Ref: ec2Securitygroup
      SubnetId:
        Ref: publicSubnet1
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${projectName}-ec2
